#!/usr/bin/ruby

# From https://github.com/arduino/Arduino/blob/master/app/src/processing/app/preproc/PdePreprocessor.java
class String
  def prototypes
    prototype_pattern = /[\w\[\]\*]+\s+[&\[\]\*\w\s]+\([&,\[\]\*\w\s]*\)(?=\s*;)/
    function_pattern  = /[\w\[\]\*]+\s+[&\[\]\*\w\s]+\([&,\[\]\*\w\s]*\)(?=\s*\{)/

    prototype_matches = self.scan prototype_pattern
    function_matches = self.scan function_pattern

    (function_matches - prototype_matches).map { |m| "#{m};"}
  end

  def scrub_comments
    gsub(/\/\*.*\*\//m, "").gsub(/\/\/.*$/, "")
  end

  def collapse_braces
      buffer = ""
      nesting = 0
      start = 0
      
      # XXX: need to keep newlines inside braces so we can determine the line
      # number of a prototype
      self.length.times do |i|
        case self[i].chr # The worst thing about Ruby<1.9 is that String#[] returns a Fixnum. Stupid. -nasser
        when "{"
          buffer << self[start..i+1] if nesting == 0 # include the '{'
          nesting += 1
        when "}"
          nesting -= 1
          start = i if nesting == 0 # include the '}'
        end
      end
      
      buffer << self[start..-1]
      return buffer
  end
end

puts open(ARGV.first).read.scrub_comments.collapse_braces.prototypes